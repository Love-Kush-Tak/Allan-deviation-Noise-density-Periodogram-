#Plot the Allan deviation for the attached sensor readings (ADEV-617_HW2.csv).
import allantools # https://github.com/aewallin/allantools/
import numpy as np
import openpyxl, os, glob
import matplotlib.pyplot as plt
os.chdir("...") #directory of excel sheet
wb = openpyxl.load_workbook('.....xlsx') #name of sheet
sheet = wb.get_sheet_by_name('ADEV-617_HW2.csv')
#Min volatge: 0.0783543, Max voltage: 0.0785075
V_min = 0.0783542*pow(10,7) #to convert them into micro-volts*10
V_max = 0.0785075*pow(10,7)
diff = int(V_max-V_min)
#find the minimum value of time interval, T
'''Step1: run the itervals by a factor of diff/100 and check if there always exist more than 1 value in each interval'''
#intervals to be start with a 5micro-volts and check upto max difference i.e. 154 microV with a gap of 0.5microvolt
interval = []
v_min = int(V_min)
#print(diff)
for i in range(2,diff,1):  #responsible for checking least interval and valid intervals
    num_times = 0 #number of times k>1
    for v_min in range(int(V_min), int(V_max), i):
        k = 0
        for j in range(2,1666):
            val = sheet['B' + str(j)].value*pow(10,7)
    #start with the minimum value
            if(val>v_min and val<=v_min+i):
                k = k + 1
        if(k>=1):
            num_times = num_times + 1
    #print(num_times, int(diff/i))
    if(num_times >= int(diff/i)):
        interval.append(i/10)
    if(int(i/10)>int(1664/9)):
        break
arr = []
for i in range(2,1666):
    val = sheet['B' +str(i)].value*pow(10,6)
    arr.append(val)
# Compute a deviation using the Dataset class
interval_arr = np.linspace(35,190, 155)
'''a= allantools.Dataset(data=arr, data_type = 'freq', taus=interval_arr)
a.compute("adev")
# New in 2019.7 : write results to file
b = allantools.Plot()
b.plot(a)
b.show()
print(a.data())'''

(tau_out, adev, adevrr,n) = allantools.adev(arr, rate=1.0, data_type='freq', taus=interval)
plt.loglog(tau_out, adev)
plt.show()
print(min(adev))
print(np.interp(1,tau_out,adev))

